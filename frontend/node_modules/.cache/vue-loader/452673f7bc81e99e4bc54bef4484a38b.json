{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lq/ifb/src/eshop/frontend/src/components/files/ExtendedImage.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/components/files/ExtendedImage.vue","mtime":1583132470972},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmltYWdlLWV4LWNvbnRhaW5lciB7CiAgbWFyZ2luOiBhdXRvOwogIG92ZXJmbG93OiBoaWRkZW47CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgouaW1hZ2UtZXgtaW1nIHsKICBsZWZ0OiAwOwogIHRvcDogMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMXMgZWFzZTsKfQo="},{"version":3,"sources":["ExtendedImage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ExtendedImage.vue","sourceRoot":"src/components/files","sourcesContent":["<template>\n  <div\n    class=\"image-ex-container\"\n    ref=\"container\"\n    @touchstart=\"touchStart\"\n    @touchmove=\"touchMove\"\n    @dblclick=\"zoomAuto\"\n    @mousedown=\"mousedownStart\"\n    @mousemove=\"mouseMove\"\n    @mouseup=\"mouseUp\"\n    @wheel=\"wheelMove\"\n  >\n    <img :src=\"src\" class=\"image-ex-img\" ref=\"imgex\" @load=\"setCenter\">\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    src: String,\n    moveDisabledTime: {\n      type: Number,\n      default: () => 200\n    },\n    maxScale: {\n      type: Number,\n      default: () => 4\n    },\n    minScale: {\n      type: Number,\n      default: () => 0.25\n    },\n    classList: {\n      type: Array,\n      default: () => []\n    },\n    zoomStep: {\n      type: Number,\n      default: () => 0.25\n    },\n    autofill: {\n      type: Boolean,\n      default: () => false\n    }\n  },\n  data() {\n    return {\n      scale: 1,\n      lastX: null,\n      lastY: null,\n      inDrag: false,\n      lastTouchDistance: 0,\n      moveDisabled: false,\n      disabledTimer: null\n    }\n  },\n  mounted() {\n    let container = this.$refs.container\n    this.classList.forEach(className => container.classList.add(className))\n    // set width and height if they are zero\n    if (getComputedStyle(container).width === \"0px\") {\n      container.style.width = \"100%\"\n    }\n    if (getComputedStyle(container).height === \"0px\") {\n      container.style.height = \"100%\"\n    }\n  },\n  methods: {\n    setCenter() {\n      let container = this.$refs.container\n      let img = this.$refs.imgex\n\n      let rate = Math.min(\n        container.clientWidth / img.clientWidth,\n        container.clientHeight / img.clientHeight\n      )\n      if (!this.autofill && rate > 1) {\n        rate = 1\n      }\n      // height will be auto set\n      img.width = Math.floor(img.clientWidth * rate)\n      img.style.top = `${Math.floor((container.clientHeight - img.clientHeight) / 2)}px`\n      img.style.left = `${Math.floor((container.clientWidth - img.clientWidth) / 2)}px`\n      document.addEventListener('mouseup', () => this.inDrag = false )\n    },\n    mousedownStart(event) {\n      this.lastX = null\n      this.lastY = null\n      this.inDrag = true\n      event.preventDefault()\n    },\n    mouseMove(event) {\n      if (!this.inDrag) return\n      this.doMove(event.movementX, event.movementY)\n      event.preventDefault()\n    },\n    mouseUp(event) {\n      this.inDrag = false\n      event.preventDefault()\n    },\n    touchStart(event) {\n      this.lastX = null\n      this.lastY = null\n      this.lastTouchDistance = null\n      event.preventDefault()\n    },\n    zoomAuto(event) {\n      switch (this.scale) {\n        case 1:\n          this.scale = 2\n          break\n        case 2:\n          this.scale = 4\n          break\n        default:\n        case 4:\n          this.scale = 1\n          break\n      }\n      this.setZoom()\n      event.preventDefault()\n    },\n    touchMove(event) {\n      event.preventDefault()\n      if (this.lastX === null) {\n        this.lastX = event.targetTouches[0].pageX\n        this.lastY = event.targetTouches[0].pageY\n        return\n      }\n      let step = this.$refs.imgex.width / 5\n      if (event.targetTouches.length === 2) {\n        this.moveDisabled = true\n        clearTimeout(this.disabledTimer)\n        this.disabledTimer = setTimeout(\n          () => (this.moveDisabled = false),\n          this.moveDisabledTime\n        )\n\n        let p1 = event.targetTouches[0]\n        let p2 = event.targetTouches[1]\n        let touchDistance = Math.sqrt(\n          Math.pow(p2.pageX - p1.pageX, 2) + Math.pow(p2.pageY - p1.pageY, 2)\n        )\n        if (!this.lastTouchDistance) {\n          this.lastTouchDistance = touchDistance\n          return\n        }\n        this.scale += (touchDistance - this.lastTouchDistance) / step\n        this.lastTouchDistance = touchDistance\n        this.setZoom()\n      } else if (event.targetTouches.length === 1) {\n        if (this.moveDisabled) return\n        let x = event.targetTouches[0].pageX - this.lastX\n        let y = event.targetTouches[0].pageY - this.lastY\n        if (Math.abs(x) >= step && Math.abs(y) >= step) return\n        this.lastX = event.targetTouches[0].pageX\n        this.lastY = event.targetTouches[0].pageY\n        this.doMove(x, y)\n      }\n    },\n    doMove(x, y) {\n      let style = this.$refs.imgex.style\n      style.left = `${this.pxStringToNumber(style.left) + x}px`\n      style.top = `${this.pxStringToNumber(style.top) + y}px`\n    },\n    wheelMove(event) {\n      this.scale += (event.wheelDeltaY / 100) * this.zoomStep\n      this.setZoom()\n    },\n    setZoom() {\n      this.scale = this.scale < this.minScale ? this.minScale : this.scale\n      this.scale = this.scale > this.maxScale ? this.maxScale : this.scale\n      this.$refs.imgex.style.transform = `scale(${this.scale})`\n    },\n    pxStringToNumber(style) {\n      return +style.replace(\"px\", \"\")\n    }\n  }\n}\n</script>\n<style>\n.image-ex-container {\n  margin: auto;\n  overflow: hidden;\n  position: relative;\n}\n\n.image-ex-img {\n  left: 0;\n  top: 0;\n  position: absolute;\n  transition: transform 0.1s ease;\n}\n</style>\n"]}]}