{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lq/ifb/src/eshop/frontend/src/components/files/Listing.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/components/files/Listing.vue","mtime":1583132470972},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Listing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Listing.vue","sourceRoot":"src/components/files","sourcesContent":["<template>\n  <div v-if=\"(req.numDirs + req.numFiles) == 0\">\n    <h2 class=\"message\">\n      <i class=\"material-icons\">sentiment_dissatisfied</i>\n      <span>{{ $t('files.lonely') }}</span>\n    </h2>\n    <input style=\"display:none\" type=\"file\" id=\"upload-input\" @change=\"uploadInput($event)\" multiple>\n  </div>\n  <div v-else id=\"listing\"\n    :class=\"user.viewMode\"\n    @dragenter=\"dragEnter\"\n    @dragend=\"dragEnd\">\n    <div>\n      <div class=\"item header\">\n        <div></div>\n        <div>\n          <p :class=\"{ active: nameSorted }\" class=\"name\"\n            role=\"button\"\n            tabindex=\"0\"\n            @click=\"sort('name')\"\n            :title=\"$t('files.sortByName')\"\n            :aria-label=\"$t('files.sortByName')\">\n            <span>{{ $t('files.name') }}</span>\n            <i class=\"material-icons\">{{ nameIcon }}</i>\n          </p>\n\n          <p :class=\"{ active: sizeSorted }\" class=\"size\"\n            role=\"button\"\n            tabindex=\"0\"\n            @click=\"sort('size')\"\n            :title=\"$t('files.sortBySize')\"\n            :aria-label=\"$t('files.sortBySize')\">\n            <span>{{ $t('files.size') }}</span>\n            <i class=\"material-icons\">{{ sizeIcon }}</i>\n          </p>\n          <p :class=\"{ active: modifiedSorted }\" class=\"modified\"\n            role=\"button\"\n            tabindex=\"0\"\n            @click=\"sort('modified')\"\n            :title=\"$t('files.sortByLastModified')\"\n            :aria-label=\"$t('files.sortByLastModified')\">\n            <span>{{ $t('files.lastModified') }}</span>\n            <i class=\"material-icons\">{{ modifiedIcon }}</i>\n          </p>\n        </div>\n      </div>\n    </div>\n\n    <h2 v-if=\"req.numDirs > 0\">{{ $t('files.folders') }}</h2>\n    <div v-if=\"req.numDirs > 0\">\n      <item v-for=\"(item) in dirs\"\n        :key=\"base64(item.name)\"\n        v-bind:index=\"item.index\"\n        v-bind:name=\"item.name\"\n        v-bind:isDir=\"item.isDir\"\n        v-bind:url=\"item.url\"\n        v-bind:modified=\"item.modified\"\n        v-bind:type=\"item.type\"\n        v-bind:size=\"item.size\">\n      </item>\n    </div>\n\n    <h2 v-if=\"req.numFiles > 0\">{{ $t('files.files') }}</h2>\n    <div v-if=\"req.numFiles > 0\">\n      <item v-for=\"(item) in files\"\n        :key=\"base64(item.name)\"\n        v-bind:index=\"item.index\"\n        v-bind:name=\"item.name\"\n        v-bind:isDir=\"item.isDir\"\n        v-bind:url=\"item.url\"\n        v-bind:modified=\"item.modified\"\n        v-bind:type=\"item.type\"\n        v-bind:size=\"item.size\">\n      </item>\n    </div>\n\n    <input style=\"display:none\" type=\"file\" id=\"upload-input\" @change=\"uploadInput($event)\" multiple>\n\n    <div :class=\"{ active: $store.state.multiple }\" id=\"multiple-selection\">\n    <p>{{ $t('files.multipleSelectionEnabled') }}</p>\n      <div @click=\"$store.commit('multiple', false)\" tabindex=\"0\" role=\"button\" :title=\"$t('files.clear')\" :aria-label=\"$t('files.clear')\" class=\"action\">\n        <i class=\"material-icons\">clear</i>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex'\nimport Item from './ListingItem'\nimport css from '@/utils/css'\nimport { users, files as api } from '@/api'\nimport buttons from '@/utils/buttons'\nimport url from '@/utils/url'\n\nexport default {\n  name: 'listing',\n  components: { Item },\n  data: function () {\n    return {\n      show: 50\n    }\n  },\n  computed: {\n    ...mapState(['req', 'selected', 'user']),\n    nameSorted () {\n      return (this.req.sorting.by === 'name')\n    },\n    sizeSorted () {\n      return (this.req.sorting.by === 'size')\n    },\n    modifiedSorted () {\n      return (this.req.sorting.by === 'modified')\n    },\n    ascOrdered () {\n      return this.req.sorting.asc\n    },\n    items () {\n      const dirs = []\n      const files = []\n\n      this.req.items.forEach((item) => {\n        if (item.isDir) {\n          dirs.push(item)\n        } else {\n          files.push(item)\n        }\n      })\n\n      return { dirs, files }\n    },\n    dirs () {\n      return this.items.dirs.slice(0, this.show)\n    },\n    files () {\n      let show = this.show - this.items.dirs.length\n\n      if (show < 0) show = 0\n\n      return this.items.files.slice(0, show)\n    },\n    nameIcon () {\n      if (this.nameSorted && !this.ascOrdered) {\n        return 'arrow_upward'\n      }\n\n      return 'arrow_downward'\n    },\n    sizeIcon () {\n      if (this.sizeSorted && this.ascOrdered) {\n        return 'arrow_downward'\n      }\n\n      return 'arrow_upward'\n    },\n    modifiedIcon () {\n      if (this.modifiedSorted && this.ascOrdered) {\n        return 'arrow_downward'\n      }\n\n      return 'arrow_upward'\n    }\n  },\n  mounted: function () {\n    // Check the columns size for the first time.\n    this.resizeEvent()\n\n    // Add the needed event listeners to the window and document.\n    window.addEventListener('keydown', this.keyEvent)\n    window.addEventListener('resize', this.resizeEvent)\n    window.addEventListener('scroll', this.scrollEvent)\n    document.addEventListener('dragover', this.preventDefault)\n    document.addEventListener('drop', this.drop)\n  },\n  beforeDestroy () {\n    // Remove event listeners before destroying this page.\n    window.removeEventListener('keydown', this.keyEvent)\n    window.removeEventListener('resize', this.resizeEvent)\n    window.removeEventListener('scroll', this.scrollEvent)\n    document.removeEventListener('dragover', this.preventDefault)\n    document.removeEventListener('drop', this.drop)\n  },\n  methods: {\n    ...mapMutations([ 'updateUser' ]),\n    base64: function (name) {\n      return window.btoa(unescape(encodeURIComponent(name)))\n    },\n    keyEvent (event) {\n      if (!event.ctrlKey && !event.metaKey) {\n        return\n      }\n\n      let key = String.fromCharCode(event.which).toLowerCase()\n\n      switch (key) {\n        case 'f':\n          event.preventDefault()\n          this.$store.commit('showHover', 'search')\n          break\n        case 'c':\n        case 'x':\n          this.copyCut(event, key)\n          break\n        case 'v':\n          this.paste(event)\n          break\n      }\n    },\n    preventDefault (event) {\n      // Wrapper around prevent default.\n      event.preventDefault()\n    },\n    copyCut (event, key) {\n      if (event.target.tagName.toLowerCase() === 'input') {\n        return\n      }\n\n      let items = []\n\n      for (let i of this.selected) {\n        items.push({\n          from: this.req.items[i].url,\n          name: encodeURIComponent(this.req.items[i].name)\n        })\n      }\n\n      if (items.length == 0) {\n        return\n      }\n\n      this.$store.commit('updateClipboard', {\n        key: key,\n        items: items\n      })\n    },\n    paste (event) {\n      if (event.target.tagName.toLowerCase() === 'input') {\n        return\n      }\n\n      let items = []\n\n      for (let item of this.$store.state.clipboard.items) {\n        const from = item.from.endsWith('/') ? item.from.slice(0, -1) : item.from\n        const to = this.$route.path + item.name\n        items.push({ from, to })\n      }\n\n      if (items.length === 0) {\n        return\n      }\n\n      if (this.$store.state.clipboard.key === 'x') {\n        api.move(items).then(() => {\n          this.$store.commit('setReload', true)\n        }).catch(this.$showError)\n        return\n      }\n\n      api.copy(items).then(() => {\n        this.$store.commit('setReload', true)\n      }).catch(this.$showError)\n    },\n    resizeEvent () {\n      // Update the columns size based on the window width.\n      let columns = Math.floor(document.querySelector('main').offsetWidth / 300)\n      let items = css(['#listing.mosaic .item', '.mosaic#listing .item'])\n      if (columns === 0) columns = 1\n      items.style.width = `calc(${100 / columns}% - 1em)`\n    },\n    scrollEvent () {\n      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n        this.show += 50\n      }\n    },\n    dragEnter () {\n      // When the user starts dragging an item, put every\n      // file on the listing with 50% opacity.\n      let items = document.getElementsByClassName('item')\n\n      Array.from(items).forEach(file => {\n        file.style.opacity = 0.5\n      })\n    },\n    dragEnd () {\n      this.resetOpacity()\n    },\n    drop: function (event) {\n      event.preventDefault()\n      this.resetOpacity()\n\n      let dt = event.dataTransfer\n      let files = dt.files\n      let el = event.target\n\n      if (files.length <= 0) return\n\n      for (let i = 0; i < 5; i++) {\n        if (el !== null && !el.classList.contains('item')) {\n          el = el.parentElement\n        }\n      }\n\n      let base = ''\n      if (el !== null && el.classList.contains('item') && el.dataset.dir === 'true') {\n        base = el.querySelector('.name').innerHTML + '/'\n      }\n\n      if (base !== '') {\n        api.fetch(this.$route.path + base)\n          .then(req => {\n            this.checkConflict(files, req.items, base)\n          })\n          .catch(this.$showError)\n\n        return\n      }\n\n      this.checkConflict(files, this.req.items, base)\n    },\n    checkConflict (files, items, base) {\n      if (typeof items === 'undefined' || items === null) {\n        items = []\n      }\n\n      let conflict = false\n      for (let i = 0; i < files.length; i++) {\n        let res = items.findIndex(function hasConflict (element) {\n          return (element.name === this)\n        }, files[i].name)\n\n        if (res >= 0) {\n          conflict = true\n          break\n        }\n      }\n\n      if (!conflict) {\n        this.handleFiles(files, base)\n        return\n      }\n\n      this.$store.commit('showHover', {\n        prompt: 'replace',\n        confirm: (event) => {\n          event.preventDefault()\n          this.$store.commit('closeHovers')\n          this.handleFiles(files, base, true)\n        }\n      })\n    },\n    uploadInput (event) {\n      this.checkConflict(event.currentTarget.files, this.req.items, '')\n    },\n    resetOpacity () {\n      let items = document.getElementsByClassName('item')\n\n      Array.from(items).forEach(file => {\n        file.style.opacity = 1\n      })\n    },\n    handleFiles (files, base, overwrite = false) {\n      buttons.loading('upload')\n      let promises = []\n      let progress = new Array(files.length).fill(0)\n\n      let onupload = (id) => (event) => {\n        progress[id] = (event.loaded / event.total) * 100\n\n        let sum = 0\n        for (let i = 0; i < progress.length; i++) {\n          sum += progress[i]\n        }\n\n        this.$store.commit('setProgress', Math.ceil(sum / progress.length))\n      }\n\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i]\n        let filenameEncoded = url.encodeRFC5987ValueChars(file.name)\n        promises.push(api.post(this.$route.path + base + filenameEncoded, file, overwrite, onupload(i)))\n      }\n\n      let finish = () => {\n        buttons.success('upload')\n        this.$store.commit('setProgress', 0)\n      }\n\n      Promise.all(promises)\n        .then(() => {\n          finish()\n          this.$store.commit('setReload', true)\n        })\n        .catch(error => {\n          finish()\n          this.$showError(error)\n        })\n\n      return false\n    },\n    async sort (by) {\n      let asc = false\n\n      if (by === 'name') {\n        if (this.nameIcon === 'arrow_upward') {\n          asc = true\n        }\n      } else if (by === 'size') {\n        if (this.sizeIcon === 'arrow_upward') {\n          asc = true\n        }\n      } else if (by === 'modified') {\n        if (this.modifiedIcon === 'arrow_upward') {\n          asc = true\n        }\n      }\n\n      try {\n        await users.update({ id: this.user.id, sorting: { by, asc } }, ['sorting'])\n      } catch (e) {\n        this.$showError(e)\n      }\n\n      this.$store.commit('setReload', true)\n    }\n  }\n}\n</script>\n"]}]}