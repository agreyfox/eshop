{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lq/ifb/src/eshop/frontend/src/views/settings/Global.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/views/settings/Global.vue","mtime":1583132470984},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKaW1wb3J0IHsgc2V0dGluZ3MgYXMgYXBpIH0gZnJvbSAnQC9hcGknCmltcG9ydCBVc2VyRm9ybSBmcm9tICdAL2NvbXBvbmVudHMvc2V0dGluZ3MvVXNlckZvcm0nCmltcG9ydCBSdWxlcyBmcm9tICdAL2NvbXBvbmVudHMvc2V0dGluZ3MvUnVsZXMnCmltcG9ydCBUaGVtZXMgZnJvbSAnQC9jb21wb25lbnRzL3NldHRpbmdzL1RoZW1lcycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnc2V0dGluZ3MnLAogIGNvbXBvbmVudHM6IHsKICAgIFRoZW1lcywKICAgIFVzZXJGb3JtLAogICAgUnVsZXMKICB9LAogIGRhdGE6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB7CiAgICAgIG9yaWdpbmFsU2V0dGluZ3M6IG51bGwsCiAgICAgIHNldHRpbmdzOiBudWxsCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoWyAndXNlcicgXSkKICB9LAogIGFzeW5jIGNyZWF0ZWQgKCkgewogICAgdHJ5IHsKICAgICAgY29uc3Qgb3JpZ2luYWwgPSBhd2FpdCBhcGkuZ2V0KCkKICAgICAgbGV0IHNldHRpbmdzID0geyAuLi5vcmlnaW5hbCwgY29tbWFuZHM6IFtdIH0KCiAgICAgIGZvciAoY29uc3Qga2V5IGluIG9yaWdpbmFsLmNvbW1hbmRzKSB7CiAgICAgICAgc2V0dGluZ3MuY29tbWFuZHMucHVzaCh7CiAgICAgICAgICBuYW1lOiBrZXksCiAgICAgICAgICB2YWx1ZTogb3JpZ2luYWwuY29tbWFuZHNba2V5XS5qb2luKCdcbicpCiAgICAgICAgfSkKICAgICAgfQoKICAgICAgc2V0dGluZ3Muc2hlbGwgPSBzZXR0aW5ncy5zaGVsbC5qb2luKCcgJykKCiAgICAgIHRoaXMub3JpZ2luYWxTZXR0aW5ncyA9IG9yaWdpbmFsCiAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncwogICAgfSBjYXRjaCAoZSkgewogICAgICB0aGlzLiRzaG93RXJyb3IoZSkKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNhcGl0YWxpemUgKG5hbWUsIHdoZXJlID0gJ18nKSB7CiAgICAgIGlmICh3aGVyZSA9PT0gJ2NhcHMnKSB3aGVyZSA9IC8oPz1bQS1aXSkvCiAgICAgIGxldCBzcGxpdHRlZCA9IG5hbWUuc3BsaXQod2hlcmUpCiAgICAgIG5hbWUgPSAnJwoKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcGxpdHRlZC5sZW5ndGg7IGkrKykgewogICAgICAgIG5hbWUgKz0gc3BsaXR0ZWRbaV0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzcGxpdHRlZFtpXS5zbGljZSgxKSArICcgJwogICAgICB9CgogICAgICByZXR1cm4gbmFtZS5zbGljZSgwLCAtMSkKICAgIH0sCiAgICBhc3luYyBzYXZlICgpIHsKICAgICAgbGV0IHNldHRpbmdzID0gewogICAgICAgIC4uLnRoaXMuc2V0dGluZ3MsCiAgICAgICAgc2hlbGw6IHRoaXMuc2V0dGluZ3Muc2hlbGwudHJpbSgpLnNwbGl0KCcgJykuZmlsdGVyKHMgPT4gcyAhPT0gJycpLAogICAgICAgIGNvbW1hbmRzOiB7fQogICAgICB9CgogICAgICBmb3IgKGNvbnN0IHsgbmFtZSwgdmFsdWUgfSBvZiB0aGlzLnNldHRpbmdzLmNvbW1hbmRzKSB7CiAgICAgICAgc2V0dGluZ3MuY29tbWFuZHNbbmFtZV0gPSB2YWx1ZS5zcGxpdCgnXG4nKS5maWx0ZXIoY21kID0+IGNtZCAhPT0gJycpCiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgYXdhaXQgYXBpLnVwZGF0ZShzZXR0aW5ncykKICAgICAgICB0aGlzLiRzaG93U3VjY2Vzcyh0aGlzLiR0KCdzZXR0aW5ncy5zZXR0aW5nc1VwZGF0ZWQnKSkKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIHRoaXMuJHNob3dFcnJvcihlKQogICAgICB9CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Global.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Global.vue","sourceRoot":"src/views/settings","sourcesContent":["<template>\n  <div class=\"dashboard\" v-if=\"settings !== null\">\n    <form class=\"card\" @submit.prevent=\"save\">\n      <div class=\"card-title\">\n        <h2>{{ $t('settings.globalSettings') }}</h2>\n      </div>\n\n      <div class=\"card-content\">\n        <p><input type=\"checkbox\" v-model=\"settings.signup\"> {{ $t('settings.allowSignup') }}</p>\n\n        <p><input type=\"checkbox\" v-model=\"settings.createUserDir\"> {{ $t('settings.createUserDir') }}</p>\n\n        <h3>{{ $t('settings.rules') }}</h3>\n        <p class=\"small\">{{ $t('settings.globalRules') }}</p>\n        <rules :rules.sync=\"settings.rules\" />\n\n        <h3>{{ $t('settings.executeOnShell') }}</h3>\n        <p class=\"small\">{{ $t('settings.executeOnShellDescription') }}</p>\n        <input class=\"input input--block\" type=\"text\" placeholder=\"bash -c, cmd /c, ...\" v-model=\"settings.shell\" />\n\n        <h3>{{ $t('settings.branding') }}</h3>\n\n        <i18n path=\"settings.brandingHelp\" tag=\"p\" class=\"small\">\n          <a class=\"link\" target=\"_blank\" href=\"https://filebrowser.xyz/configuration/custom-branding\">{{ $t('settings.documentation') }}</a>\n        </i18n>\n\n        <p>\n          <input type=\"checkbox\" v-model=\"settings.branding.disableExternal\" id=\"branding-links\" />\n          {{ $t('settings.disableExternalLinks') }}\n        </p>\n\n        <p>\n          <label for=\"theme\">{{ $t('settings.themes.title') }}</label>\n          <themes class=\"input input--block\" :theme.sync=\"settings.branding.theme\" id=\"theme\"></themes>\n        </p>\n\n        <p>\n          <label for=\"branding-name\">{{ $t('settings.instanceName') }}</label>\n          <input class=\"input input--block\" type=\"text\" v-model=\"settings.branding.name\" id=\"branding-name\" />\n        </p>\n\n        <p>\n          <label for=\"branding-files\">{{ $t('settings.brandingDirectoryPath') }}</label>\n          <input class=\"input input--block\" type=\"text\" v-model=\"settings.branding.files\" id=\"branding-files\" />\n        </p>\n\n      </div>\n\n      <div class=\"card-action\">\n        <input class=\"button button--flat\" type=\"submit\" :value=\"$t('buttons.update')\">\n      </div>\n    </form>\n\n    <form class=\"card\" @submit.prevent=\"save\">\n      <div class=\"card-title\">\n        <h2>{{ $t('settings.userDefaults') }}</h2>\n      </div>\n\n      <div class=\"card-content\">\n        <p class=\"small\">{{ $t('settings.defaultUserDescription') }}</p>\n\n        <user-form :isNew=\"false\" :isDefault=\"true\" :user.sync=\"settings.defaults\" />\n      </div>\n\n      <div class=\"card-action\">\n        <input class=\"button button--flat\" type=\"submit\" :value=\"$t('buttons.update')\">\n      </div>\n    </form>\n\n    <form class=\"card\" @submit.prevent=\"save\">\n      <div class=\"card-title\">\n        <h2>{{ $t('settings.commandRunner') }}</h2>\n      </div>\n\n      <div class=\"card-content\">\n        <i18n path=\"settings.commandRunnerHelp\" tag=\"p\" class=\"small\">\n          <code>FILE</code>\n          <code>SCOPE</code>\n          <a class=\"link\" target=\"_blank\" href=\"https://filebrowser.xyz/configuration/command-runner\">{{ $t('settings.documentation') }}</a>\n        </i18n>\n\n        <div v-for=\"command in settings.commands\" :key=\"command.name\" class=\"collapsible\">\n          <input :id=\"command.name\" type=\"checkbox\">\n          <label :for=\"command.name\">\n            <p>{{ capitalize(command.name) }}</p>\n            <i class=\"material-icons\">arrow_drop_down</i>\n          </label>\n          <div class=\"collapse\">\n            <textarea class=\"input input--block input--textarea\" v-model.trim=\"command.value\"></textarea>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card-action\">\n        <input class=\"button button--flat\" type=\"submit\" :value=\"$t('buttons.update')\">\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { settings as api } from '@/api'\nimport UserForm from '@/components/settings/UserForm'\nimport Rules from '@/components/settings/Rules'\nimport Themes from '@/components/settings/Themes'\n\nexport default {\n  name: 'settings',\n  components: {\n    Themes,\n    UserForm,\n    Rules\n  },\n  data: function () {\n    return {\n      originalSettings: null,\n      settings: null\n    }\n  },\n  computed: {\n    ...mapState([ 'user' ])\n  },\n  async created () {\n    try {\n      const original = await api.get()\n      let settings = { ...original, commands: [] }\n\n      for (const key in original.commands) {\n        settings.commands.push({\n          name: key,\n          value: original.commands[key].join('\\n')\n        })\n      }\n\n      settings.shell = settings.shell.join(' ')\n\n      this.originalSettings = original\n      this.settings = settings\n    } catch (e) {\n      this.$showError(e)\n    }\n  },\n  methods: {\n    capitalize (name, where = '_') {\n      if (where === 'caps') where = /(?=[A-Z])/\n      let splitted = name.split(where)\n      name = ''\n\n      for (let i = 0; i < splitted.length; i++) {\n        name += splitted[i].charAt(0).toUpperCase() + splitted[i].slice(1) + ' '\n      }\n\n      return name.slice(0, -1)\n    },\n    async save () {\n      let settings = {\n        ...this.settings,\n        shell: this.settings.shell.trim().split(' ').filter(s => s !== ''),\n        commands: {}\n      }\n\n      for (const { name, value } of this.settings.commands) {\n        settings.commands[name] = value.split('\\n').filter(cmd => cmd !== '')\n      }\n\n      try {\n        await api.update(settings)\n        this.$showSuccess(this.$t('settings.settingsUpdated'))\n      } catch (e) {\n        this.$showError(e)\n      }\n    }\n  }\n}\n</script>\n"]}]}