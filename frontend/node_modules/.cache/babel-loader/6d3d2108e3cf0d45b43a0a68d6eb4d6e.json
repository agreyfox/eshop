{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/thread-loader/dist/cjs.js!/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js!/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lq/ifb/src/eshop/frontend/src/components/prompts/Delete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/components/prompts/Delete.vue","mtime":1583132470976},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2xxL2lmYi9zcmMvZXNob3AvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIi9ob21lL2xxL2lmYi9zcmMvZXNob3AvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IG1hcEdldHRlcnMsIG1hcE11dGF0aW9ucywgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgZmlsZXMgYXMgYXBpIH0gZnJvbSAnQC9hcGknOwppbXBvcnQgdXJsIGZyb20gJ0AvdXRpbHMvdXJsJzsKaW1wb3J0IGJ1dHRvbnMgZnJvbSAnQC91dGlscy9idXR0b25zJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdkZWxldGUnLAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKHt9LCBtYXBHZXR0ZXJzKFsnaXNMaXN0aW5nJywgJ3NlbGVjdGVkQ291bnQnXSksIHt9LCBtYXBTdGF0ZShbJ3JlcScsICdzZWxlY3RlZCddKSksCiAgbWV0aG9kczogX29iamVjdFNwcmVhZCh7fSwgbWFwTXV0YXRpb25zKFsnY2xvc2VIb3ZlcnMnXSksIHsKICAgIHN1Ym1pdDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3N1Ym1pdCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHByb21pc2VzLCBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uLCBfZGlkSXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yRXJyb3IsIF9pdGVyYXRvciwgX3N0ZXAsIGluZGV4OwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlSG92ZXJzKCk7CiAgICAgICAgICAgICAgICBidXR0b25zLmxvYWRpbmcoJ2RlbGV0ZScpOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNMaXN0aW5nKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBhcGkucmVtb3ZlKHRoaXMuJHJvdXRlLnBhdGgpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBidXR0b25zLnN1Y2Nlc3MoJ2RlbGV0ZScpOwogICAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgICAgICAgICAgICBwYXRoOiB1cmwucmVtb3ZlTGFzdERpcih0aGlzLiRyb3V0ZS5wYXRoKSArICcvJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5zZWxlY3RlZENvdW50ID09PSAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgcHJvbWlzZXMgPSBbXTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE1OwoKICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yID0gdGhpcy5zZWxlY3RlZFtTeW1ib2wuaXRlcmF0b3JdKCk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICBpbmRleCA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKGFwaS5yZW1vdmUodGhpcy5yZXEuaXRlbXNbaW5kZXhdLnVybCkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE5OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxNSk7CiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IF9jb250ZXh0LnQwOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIzOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI0OwoKICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI2OwoKICAgICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKCiAgICAgICAgICAgICAgY2FzZSAyOToKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMjYpOwoKICAgICAgICAgICAgICBjYXNlIDMwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyMyk7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpOwoKICAgICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgICAgYnV0dG9ucy5zdWNjZXNzKCdkZWxldGUnKTsKICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnc2V0UmVsb2FkJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDI7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAzNzsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHRbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBidXR0b25zLmRvbmUoJ2RlbGV0ZScpOwogICAgICAgICAgICAgICAgdGhpcy4kc2hvd0Vycm9yKF9jb250ZXh0LnQxKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGlzdGluZykgdGhpcy4kc3RvcmUuY29tbWl0KCdzZXRSZWxvYWQnLCB0cnVlKTsKCiAgICAgICAgICAgICAgY2FzZSA0MjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMsIFtbMiwgMzddLCBbMTUsIDE5LCAyMywgMzFdLCBbMjQsLCAyNiwgMzBdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHN1Ym1pdCgpIHsKICAgICAgICByZXR1cm4gX3N1Ym1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc3VibWl0OwogICAgfSgpCiAgfSkKfTs="},{"version":3,"sources":["Delete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAA,UAAA,EAAA,YAAA,EAAA,QAAA,QAAA,MAAA;AACA,SAAA,KAAA,IAAA,GAAA,QAAA,OAAA;AACA,OAAA,GAAA,MAAA,aAAA;AACA,OAAA,OAAA,MAAA,iBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,QAAA,oBACA,UAAA,CAAA,CAAA,WAAA,EAAA,eAAA,CAAA,CADA,MAEA,QAAA,CAAA,CAAA,KAAA,EAAA,UAAA,CAAA,CAFA,CAFA;AAMA,EAAA,OAAA,oBACA,YAAA,CAAA,CAAA,aAAA,CAAA,CADA;AAEA,IAAA,MAAA;AAAA;AAAA;AAAA,8BAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA,qBAAA,WAAA;AACA,gBAAA,OAAA,CAAA,OAAA,CAAA,QAAA;AAFA;;AAAA,oBAKA,KAAA,SALA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAMA,GAAA,CAAA,MAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CANA;;AAAA;AAOA,gBAAA,OAAA,CAAA,OAAA,CAAA,QAAA;AACA,qBAAA,OAAA,CAAA,IAAA,CAAA;AAAA,kBAAA,IAAA,EAAA,GAAA,CAAA,aAAA,CAAA,KAAA,MAAA,CAAA,IAAA,IAAA;AAAA,iBAAA;AARA;;AAAA;AAAA,sBAYA,KAAA,aAAA,KAAA,CAZA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgBA,gBAAA,QAhBA,GAgBA,EAhBA;AAAA;AAAA;AAAA;AAAA;;AAiBA,iCAAA,KAAA,QAAA,uHAAA;AAAA,kBAAA,KAAA;AACA,kBAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,CAAA,KAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA;;AAnBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAqBA,OAAA,CAAA,GAAA,CAAA,QAAA,CArBA;;AAAA;AAsBA,gBAAA,OAAA,CAAA,OAAA,CAAA,QAAA;AACA,qBAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA,IAAA;AAvBA;AAAA;;AAAA;AAAA;AAAA;AAyBA,gBAAA,OAAA,CAAA,IAAA,CAAA,QAAA;AACA,qBAAA,UAAA;AACA,oBAAA,KAAA,SAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA,IAAA;;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFA;AANA,CAAA","sourcesContent":["<template>\n  <div class=\"card floating\">\n    <div class=\"card-content\">\n      <p v-if=\"req.kind !== 'listing'\">{{ $t('prompts.deleteMessageSingle') }}</p>\n      <p v-else>{{ $t('prompts.deleteMessageMultiple', { count: selectedCount}) }}</p>\n    </div>\n    <div class=\"card-action\">\n      <button @click=\"$store.commit('closeHovers')\"\n        class=\"button button--flat button--grey\"\n        :aria-label=\"$t('buttons.cancel')\"\n        :title=\"$t('buttons.cancel')\">{{ $t('buttons.cancel') }}</button>\n      <button @click=\"submit\"\n        class=\"button button--flat button--red\"\n        :aria-label=\"$t('buttons.delete')\"\n        :title=\"$t('buttons.delete')\">{{ $t('buttons.delete') }}</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {mapGetters, mapMutations, mapState} from 'vuex'\nimport { files as api } from '@/api'\nimport url from '@/utils/url'\nimport buttons from '@/utils/buttons'\n\nexport default {\n  name: 'delete',\n  computed: {\n    ...mapGetters(['isListing', 'selectedCount']),\n    ...mapState(['req', 'selected'])\n  },\n  methods: {\n    ...mapMutations(['closeHovers']),\n    submit: async function () {\n      this.closeHovers()\n      buttons.loading('delete')\n\n      try {\n        if (!this.isListing) {\n          await api.remove(this.$route.path)\n          buttons.success('delete')\n          this.$router.push({ path: url.removeLastDir(this.$route.path) + '/' })\n          return\n        }\n\n        if (this.selectedCount === 0) {\n          return\n        }\n\n        let promises = []\n        for (let index of this.selected) {\n          promises.push(api.remove(this.req.items[index].url))\n        }\n\n        await Promise.all(promises)\n        buttons.success('delete')\n        this.$store.commit('setReload', true)\n      } catch (e) {\n        buttons.done('delete')\n        this.$showError(e)\n        if (this.isListing) this.$store.commit('setReload', true)\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/components/prompts"}]}