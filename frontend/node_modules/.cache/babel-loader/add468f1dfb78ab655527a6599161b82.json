{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/thread-loader/dist/cjs.js!/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js!/home/lq/ifb/src/eshop/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/lq/ifb/src/eshop/frontend/src/api/files.js","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/api/files.js","mtime":1583132470972},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/lq/ifb/src/eshop/frontend/src/api/files.js"],"names":["fetchURL","removePrefix","baseURL","store","fetch","url","res","status","json","data","isDir","endsWith","items","map","item","index","encodeURIComponent","name","Error","resourceAction","method","content","opts","body","responseText","remove","put","download","format","files","length","arg","file","substring","state","jwt","window","open","post","overwrite","onupload","Promise","resolve","reject","request","XMLHttpRequest","setRequestHeader","upload","onprogress","onbeforeunload","onload","onerror","error","send","finally","moveCopy","copy","promises","from","to","push","all","move","checksum","algo","checksums"],"mappings":"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","sourcesContent":["import { fetchURL, removePrefix } from './utils'\nimport { baseURL } from '@/utils/constants'\nimport store from '@/store'\n\nexport async function fetch (url) {\n  url = removePrefix(url)\n\n  const res = await fetchURL(`/api/resources${url}`, {})\n\n  if (res.status === 200) {\n    let data = await res.json()\n    data.url = `/files${url}`\n\n    if (data.isDir) {\n      if (!data.url.endsWith('/')) data.url += '/'\n      data.items = data.items.map((item, index) => {\n        item.index = index\n        item.url = `${data.url}${encodeURIComponent(item.name)}`\n\n        if (item.isDir) {\n          item.url += '/'\n        }\n\n        return item\n      })\n    }\n\n    return data\n  } else {\n    throw new Error(res.status)\n  }\n}\n\nasync function resourceAction (url, method, content) {\n  url = removePrefix(url)\n\n  let opts = { method }\n\n  if (content) {\n    opts.body = content\n  }\n\n  const res = await fetchURL(`/api/resources${url}`, opts)\n\n  if (res.status !== 200) {\n    throw new Error(res.responseText)\n  } else {\n    return res\n  }\n}\n\nexport async function remove (url) {\n  return resourceAction(url, 'DELETE')\n}\n\nexport async function put (url, content = '') {\n  return resourceAction(url, 'PUT', content)\n}\n\nexport function download (format, ...files) {\n  let url = `${baseURL}/api/raw`\n\n  if (files.length === 1) {\n    url += removePrefix(files[0]) + '?'\n  } else {\n    let arg = ''\n\n    for (let file of files) {\n      arg += removePrefix(file) + ','\n    }\n\n    arg = arg.substring(0, arg.length - 1)\n    arg = encodeURIComponent(arg)\n    url += `/?files=${arg}&`\n  }\n\n  if (format !== null) {\n    url += `algo=${format}&`\n  }\n\n  url += `auth=${store.state.jwt}`\n  window.open(url)\n}\n\nexport async function post (url, content = '', overwrite = false, onupload) {\n  url = removePrefix(url)\n\n  return new Promise((resolve, reject) => {\n    let request = new XMLHttpRequest()\n    request.open('POST', `${baseURL}/api/resources${url}?override=${overwrite}`, true)\n    request.setRequestHeader('X-Auth', store.state.jwt)\n\n    if (typeof onupload === 'function') {\n      request.upload.onprogress = onupload\n    }\n\n    // Send a message to user before closing the tab during file upload\n    window.onbeforeunload = () => \"Files are being uploaded.\"\n\n    request.onload = () => {\n      if (request.status === 200) {\n        resolve(request.responseText)\n      } else if (request.status === 409) {\n        reject(request.status)\n      } else {\n        reject(request.responseText)\n      }\n    }\n\n    request.onerror = (error) => {\n      reject(error)\n    }\n\n    request.send(content)\n    // Upload is done no more message before closing the tab \n  }).finally(() => { window.onbeforeunload = null })\n}\n\nfunction moveCopy (items, copy = false) {\n  let promises = []\n\n  for (let item of items) {\n    const from = removePrefix(item.from)\n    const to = encodeURIComponent(removePrefix(item.to))\n    const url = `${from}?action=${copy ? 'copy' : 'rename'}&destination=${to}`\n    promises.push(resourceAction(url, 'PATCH'))\n  }\n\n  return Promise.all(promises)\n}\n\nexport function move (items) {\n  return moveCopy(items)\n}\n\nexport function copy (items) {\n  return moveCopy(items, true)\n}\n\nexport async function checksum (url, algo) {\n  const data = await resourceAction(`${url}?checksum=${algo}`, 'GET')\n  return (await data.json()).checksums[algo]\n}\n"]}]}