{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/thread-loader/dist/cjs.js!/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js!/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lq/ifb/src/eshop/frontend/src/components/prompts/FileList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/components/prompts/FileList.vue","mtime":1583132470976},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIi9ob21lL2xxL2lmYi9zcmMvZXNob3AvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCB1cmwgZnJvbSAnQC91dGlscy91cmwnOwppbXBvcnQgeyBmaWxlcyB9IGZyb20gJ0AvYXBpJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdmaWxlLWxpc3QnLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpdGVtczogW10sCiAgICAgIHRvdWNoZXM6IHsKICAgICAgICBpZDogJycsCiAgICAgICAgY291bnQ6IDAKICAgICAgfSwKICAgICAgc2VsZWN0ZWQ6IG51bGwsCiAgICAgIGN1cnJlbnQ6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZQogICAgfTsKICB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKHt9LCBtYXBTdGF0ZShbJ3JlcSddKSwgewogICAgbmF2OiBmdW5jdGlvbiBuYXYoKSB7CiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodGhpcy5jdXJyZW50KTsKICAgIH0KICB9KSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgLy8gSWYgd2UncmUgc2hvd2luZyB0aGlzIG9uIGEgbGlzdGluZywKICAgIC8vIHdlIGNhbiB1c2UgdGhlIGN1cnJlbnQgcmVxdWVzdCBvYmplY3QKICAgIC8vIHRvIGZpbGwgdGhlIG1vdmUgb3B0aW9ucy4KICAgIGlmICh0aGlzLnJlcS5raW5kID09PSAnbGlzdGluZycpIHsKICAgICAgdGhpcy5maWxsT3B0aW9ucyh0aGlzLnJlcSk7CiAgICAgIHJldHVybjsKICAgIH0gLy8gT3RoZXJ3aXNlLCB3ZSBtdXN0IGJlIG9uIGEgcHJldmlldyBvciBlZGl0b3IKICAgIC8vIHNvIHdlIGZldGNoIHRoZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzIGRpcmVjdG9yeS4KCgogICAgZmlsZXMuZmV0Y2godXJsLnJlbW92ZUxhc3REaXIodGhpcy4kcm91dGUucGF0aCkpLnRoZW4odGhpcy5maWxsT3B0aW9ucykuY2F0Y2godGhpcy4kc2hvd0Vycm9yKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGZpbGxPcHRpb25zOiBmdW5jdGlvbiBmaWxsT3B0aW9ucyhyZXEpIHsKICAgICAgLy8gU2V0cyB0aGUgY3VycmVudCBwYXRoIGFuZCByZXNldHMKICAgICAgLy8gdGhlIGN1cnJlbnQgaXRlbXMuCiAgICAgIHRoaXMuY3VycmVudCA9IHJlcS51cmw7CiAgICAgIHRoaXMuaXRlbXMgPSBbXTsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNlbGVjdGVkJywgdGhpcy5jdXJyZW50KTsgLy8gSWYgdGhlIHBhdGggaXNuJ3QgdGhlIHJvb3QgcGF0aCwKICAgICAgLy8gc2hvdyBhIGJ1dHRvbiB0byBuYXZpZ2F0ZSB0byB0aGUgcHJldmlvdXMKICAgICAgLy8gZGlyZWN0b3J5LgoKICAgICAgaWYgKHJlcS51cmwgIT09ICcvZmlsZXMvJykgewogICAgICAgIHRoaXMuaXRlbXMucHVzaCh7CiAgICAgICAgICBuYW1lOiAnLi4nLAogICAgICAgICAgdXJsOiB1cmwucmVtb3ZlTGFzdERpcihyZXEudXJsKSArICcvJwogICAgICAgIH0pOwogICAgICB9IC8vIElmIHRoaXMgZm9sZGVyIGlzIGVtcHR5LCBmaW5pc2ggaGVyZS4KCgogICAgICBpZiAocmVxLml0ZW1zID09PSBudWxsKSByZXR1cm47IC8vIE90aGVyd2lzZSB3ZSBhZGQgZXZlcnkgZGlyZWN0b3J5IHRvIHRoZQogICAgICAvLyBtb3ZlIG9wdGlvbnMuCgogICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7CgogICAgICB0cnkgewogICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHJlcS5pdGVtc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHsKICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICBpZiAoIWl0ZW0uaXNEaXIpIGNvbnRpbnVlOwogICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKHsKICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLAogICAgICAgICAgICB1cmw6IGl0ZW0udXJsCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkgewogICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikgewogICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGV2ZW50KSB7CiAgICAgIC8vIFJldHJpZXZlcyB0aGUgVVJMIG9mIHRoZSBkaXJlY3RvcnkgdGhlIHVzZXIKICAgICAgLy8ganVzdCBjbGlja2VkIGluIGFuZCBmaWxsIHRoZSBvcHRpb25zIHdpdGggaXRzCiAgICAgIC8vIGNvbnRlbnQuCiAgICAgIHZhciB1cmkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudXJsOwogICAgICBmaWxlcy5mZXRjaCh1cmkpLnRoZW4odGhpcy5maWxsT3B0aW9ucykuY2F0Y2godGhpcy4kc2hvd0Vycm9yKTsKICAgIH0sCiAgICB0b3VjaHN0YXJ0OiBmdW5jdGlvbiB0b3VjaHN0YXJ0KGV2ZW50KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgdXJsID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnVybDsgLy8gSW4gMzAwIG1pbGxpc2Vjb25kcywgd2Ugc2hhbGwgcmVzZXQgdGhlIGNvdW50LgoKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMudG91Y2hlcy5jb3VudCA9IDA7CiAgICAgIH0sIDMwMCk7IC8vIElmIHRoZSBlbGVtZW50IHRoZSB1c2VyIGlzIHRvdWNoaW5nCiAgICAgIC8vIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBsYXN0IG9uZSBoZSB0b3VjaGVkLAogICAgICAvLyByZXNldCB0aGUgY291bnQuCgogICAgICBpZiAodGhpcy50b3VjaGVzLmlkICE9PSB1cmwpIHsKICAgICAgICB0aGlzLnRvdWNoZXMuaWQgPSB1cmw7CiAgICAgICAgdGhpcy50b3VjaGVzLmNvdW50ID0gMTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMudG91Y2hlcy5jb3VudCsrOyAvLyBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHRvdWNoIGFscmVhZHksCiAgICAgIC8vIG9wZW4gdGhlIG5leHQgc2NyZWVuLgoKICAgICAgaWYgKHRoaXMudG91Y2hlcy5jb3VudCA+IDEpIHsKICAgICAgICB0aGlzLm5leHQoZXZlbnQpOwogICAgICB9CiAgICB9LAogICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoZXZlbnQpIHsKICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBzZWxlY3RlZCwgdW5zZWxlY3QgaXQuCiAgICAgIGlmICh0aGlzLnNlbGVjdGVkID09PSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudXJsKSB7CiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IG51bGw7CiAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNlbGVjdGVkJywgdGhpcy5jdXJyZW50KTsKICAgICAgICByZXR1cm47CiAgICAgIH0gLy8gT3RoZXJ3aXNlIHNlbGVjdCB0aGUgZWxlbWVudC4KCgogICAgICB0aGlzLnNlbGVjdGVkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnVybDsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNlbGVjdGVkJywgdGhpcy5zZWxlY3RlZCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["FileList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <ul class=\"file-list\">\n      <li @click=\"select\"\n        @touchstart=\"touchstart\"\n        @dblclick=\"next\"\n        role=\"button\"\n        tabindex=\"0\"\n        :aria-label=\"item.name\"\n        :aria-selected=\"selected == item.url\"\n        :key=\"item.name\" v-for=\"item in items\"\n        :data-url=\"item.url\">{{ item.name }}</li>\n    </ul>\n\n    <p>{{ $t('prompts.currentlyNavigating') }} <code>{{ nav }}</code>.</p>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport url from '@/utils/url'\nimport { files } from '@/api'\n\nexport default {\n  name: 'file-list',\n  data: function () {\n    return {\n      items: [],\n      touches: {\n        id: '',\n        count: 0\n      },\n      selected: null,\n      current: window.location.pathname\n    }\n  },\n  computed: {\n    ...mapState([ 'req' ]),\n    nav () {\n      return decodeURIComponent(this.current)\n    }\n  },\n  mounted () {\n    // If we're showing this on a listing,\n    // we can use the current request object\n    // to fill the move options.\n    if (this.req.kind === 'listing') {\n      this.fillOptions(this.req)\n      return\n    }\n\n    // Otherwise, we must be on a preview or editor\n    // so we fetch the data from the previous directory.\n    files.fetch(url.removeLastDir(this.$route.path))\n      .then(this.fillOptions)\n      .catch(this.$showError)\n  },\n  methods: {\n    fillOptions (req) {\n      // Sets the current path and resets\n      // the current items.\n      this.current = req.url\n      this.items = []\n\n      this.$emit('update:selected', this.current)\n\n      // If the path isn't the root path,\n      // show a button to navigate to the previous\n      // directory.\n      if (req.url !== '/files/') {\n        this.items.push({\n          name: '..',\n          url: url.removeLastDir(req.url) + '/'\n        })\n      }\n\n      // If this folder is empty, finish here.\n      if (req.items === null) return\n\n      // Otherwise we add every directory to the\n      // move options.\n      for (let item of req.items) {\n        if (!item.isDir) continue\n\n        this.items.push({\n          name: item.name,\n          url: item.url\n        })\n      }\n    },\n    next: function (event) {\n      // Retrieves the URL of the directory the user\n      // just clicked in and fill the options with its\n      // content.\n      let uri = event.currentTarget.dataset.url\n\n      files.fetch(uri)\n        .then(this.fillOptions)\n        .catch(this.$showError)\n    },\n    touchstart (event) {\n      let url = event.currentTarget.dataset.url\n\n      // In 300 milliseconds, we shall reset the count.\n      setTimeout(() => {\n        this.touches.count = 0\n      }, 300)\n\n      // If the element the user is touching\n      // is different from the last one he touched,\n      // reset the count.\n      if (this.touches.id !== url) {\n        this.touches.id = url\n        this.touches.count = 1\n        return\n      }\n\n      this.touches.count++\n\n      // If there is more than one touch already,\n      // open the next screen.\n      if (this.touches.count > 1) {\n        this.next(event)\n      }\n    },\n    select: function (event) {\n      // If the element is already selected, unselect it.\n      if (this.selected === event.currentTarget.dataset.url) {\n        this.selected = null\n        this.$emit('update:selected', this.current)\n        return\n      }\n\n      // Otherwise select the element.\n      this.selected = event.currentTarget.dataset.url\n      this.$emit('update:selected', this.selected)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/components/prompts"}]}