{"remainingRequest":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js!/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lq/ifb/src/eshop/frontend/src/components/files/Listing.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lq/ifb/src/eshop/frontend/src/components/files/Listing.vue","mtime":1583132470972},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lq/ifb/src/eshop/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Listing.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div v-if=\"(req.numDirs + req.numFiles) == 0\">\n    <h2 class=\"message\">\n      <i class=\"material-icons\">sentiment_dissatisfied</i>\n      <span>{{ $t('files.lonely') }}</span>\n    </h2>\n    <input style=\"display:none\" type=\"file\" id=\"upload-input\" @change=\"uploadInput($event)\" multiple>\n  </div>\n  <div v-else id=\"listing\"\n    :class=\"user.viewMode\"\n    @dragenter=\"dragEnter\"\n    @dragend=\"dragEnd\">\n    <div>\n      <div class=\"item header\">\n        <div></div>\n        <div>\n          <p :class=\"{ active: nameSorted }\" class=\"name\"\n            role=\"button\"\n            tabindex=\"0\"\n            @click=\"sort('name')\"\n            :title=\"$t('files.sortByName')\"\n            :aria-label=\"$t('files.sortByName')\">\n            <span>{{ $t('files.name') }}</span>\n            <i class=\"material-icons\">{{ nameIcon }}</i>\n          </p>\n\n          <p :class=\"{ active: sizeSorted }\" class=\"size\"\n            role=\"button\"\n            tabindex=\"0\"\n            @click=\"sort('size')\"\n            :title=\"$t('files.sortBySize')\"\n            :aria-label=\"$t('files.sortBySize')\">\n            <span>{{ $t('files.size') }}</span>\n            <i class=\"material-icons\">{{ sizeIcon }}</i>\n          </p>\n          <p :class=\"{ active: modifiedSorted }\" class=\"modified\"\n            role=\"button\"\n            tabindex=\"0\"\n            @click=\"sort('modified')\"\n            :title=\"$t('files.sortByLastModified')\"\n            :aria-label=\"$t('files.sortByLastModified')\">\n            <span>{{ $t('files.lastModified') }}</span>\n            <i class=\"material-icons\">{{ modifiedIcon }}</i>\n          </p>\n        </div>\n      </div>\n    </div>\n\n    <h2 v-if=\"req.numDirs > 0\">{{ $t('files.folders') }}</h2>\n    <div v-if=\"req.numDirs > 0\">\n      <item v-for=\"(item) in dirs\"\n        :key=\"base64(item.name)\"\n        v-bind:index=\"item.index\"\n        v-bind:name=\"item.name\"\n        v-bind:isDir=\"item.isDir\"\n        v-bind:url=\"item.url\"\n        v-bind:modified=\"item.modified\"\n        v-bind:type=\"item.type\"\n        v-bind:size=\"item.size\">\n      </item>\n    </div>\n\n    <h2 v-if=\"req.numFiles > 0\">{{ $t('files.files') }}</h2>\n    <div v-if=\"req.numFiles > 0\">\n      <item v-for=\"(item) in files\"\n        :key=\"base64(item.name)\"\n        v-bind:index=\"item.index\"\n        v-bind:name=\"item.name\"\n        v-bind:isDir=\"item.isDir\"\n        v-bind:url=\"item.url\"\n        v-bind:modified=\"item.modified\"\n        v-bind:type=\"item.type\"\n        v-bind:size=\"item.size\">\n      </item>\n    </div>\n\n    <input style=\"display:none\" type=\"file\" id=\"upload-input\" @change=\"uploadInput($event)\" multiple>\n\n    <div :class=\"{ active: $store.state.multiple }\" id=\"multiple-selection\">\n    <p>{{ $t('files.multipleSelectionEnabled') }}</p>\n      <div @click=\"$store.commit('multiple', false)\" tabindex=\"0\" role=\"button\" :title=\"$t('files.clear')\" :aria-label=\"$t('files.clear')\" class=\"action\">\n        <i class=\"material-icons\">clear</i>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapMutations } from 'vuex'\nimport Item from './ListingItem'\nimport css from '@/utils/css'\nimport { users, files as api } from '@/api'\nimport buttons from '@/utils/buttons'\nimport url from '@/utils/url'\n\nexport default {\n  name: 'listing',\n  components: { Item },\n  data: function () {\n    return {\n      show: 50\n    }\n  },\n  computed: {\n    ...mapState(['req', 'selected', 'user']),\n    nameSorted () {\n      return (this.req.sorting.by === 'name')\n    },\n    sizeSorted () {\n      return (this.req.sorting.by === 'size')\n    },\n    modifiedSorted () {\n      return (this.req.sorting.by === 'modified')\n    },\n    ascOrdered () {\n      return this.req.sorting.asc\n    },\n    items () {\n      const dirs = []\n      const files = []\n\n      this.req.items.forEach((item) => {\n        if (item.isDir) {\n          dirs.push(item)\n        } else {\n          files.push(item)\n        }\n      })\n\n      return { dirs, files }\n    },\n    dirs () {\n      return this.items.dirs.slice(0, this.show)\n    },\n    files () {\n      let show = this.show - this.items.dirs.length\n\n      if (show < 0) show = 0\n\n      return this.items.files.slice(0, show)\n    },\n    nameIcon () {\n      if (this.nameSorted && !this.ascOrdered) {\n        return 'arrow_upward'\n      }\n\n      return 'arrow_downward'\n    },\n    sizeIcon () {\n      if (this.sizeSorted && this.ascOrdered) {\n        return 'arrow_downward'\n      }\n\n      return 'arrow_upward'\n    },\n    modifiedIcon () {\n      if (this.modifiedSorted && this.ascOrdered) {\n        return 'arrow_downward'\n      }\n\n      return 'arrow_upward'\n    }\n  },\n  mounted: function () {\n    // Check the columns size for the first time.\n    this.resizeEvent()\n\n    // Add the needed event listeners to the window and document.\n    window.addEventListener('keydown', this.keyEvent)\n    window.addEventListener('resize', this.resizeEvent)\n    window.addEventListener('scroll', this.scrollEvent)\n    document.addEventListener('dragover', this.preventDefault)\n    document.addEventListener('drop', this.drop)\n  },\n  beforeDestroy () {\n    // Remove event listeners before destroying this page.\n    window.removeEventListener('keydown', this.keyEvent)\n    window.removeEventListener('resize', this.resizeEvent)\n    window.removeEventListener('scroll', this.scrollEvent)\n    document.removeEventListener('dragover', this.preventDefault)\n    document.removeEventListener('drop', this.drop)\n  },\n  methods: {\n    ...mapMutations([ 'updateUser' ]),\n    base64: function (name) {\n      return window.btoa(unescape(encodeURIComponent(name)))\n    },\n    keyEvent (event) {\n      if (!event.ctrlKey && !event.metaKey) {\n        return\n      }\n\n      let key = String.fromCharCode(event.which).toLowerCase()\n\n      switch (key) {\n        case 'f':\n          event.preventDefault()\n          this.$store.commit('showHover', 'search')\n          break\n        case 'c':\n        case 'x':\n          this.copyCut(event, key)\n          break\n        case 'v':\n          this.paste(event)\n          break\n      }\n    },\n    preventDefault (event) {\n      // Wrapper around prevent default.\n      event.preventDefault()\n    },\n    copyCut (event, key) {\n      if (event.target.tagName.toLowerCase() === 'input') {\n        return\n      }\n\n      let items = []\n\n      for (let i of this.selected) {\n        items.push({\n          from: this.req.items[i].url,\n          name: encodeURIComponent(this.req.items[i].name)\n        })\n      }\n\n      if (items.length == 0) {\n        return\n      }\n\n      this.$store.commit('updateClipboard', {\n        key: key,\n        items: items\n      })\n    },\n    paste (event) {\n      if (event.target.tagName.toLowerCase() === 'input') {\n        return\n      }\n\n      let items = []\n\n      for (let item of this.$store.state.clipboard.items) {\n        const from = item.from.endsWith('/') ? item.from.slice(0, -1) : item.from\n        const to = this.$route.path + item.name\n        items.push({ from, to })\n      }\n\n      if (items.length === 0) {\n        return\n      }\n\n      if (this.$store.state.clipboard.key === 'x') {\n        api.move(items).then(() => {\n          this.$store.commit('setReload', true)\n        }).catch(this.$showError)\n        return\n      }\n\n      api.copy(items).then(() => {\n        this.$store.commit('setReload', true)\n      }).catch(this.$showError)\n    },\n    resizeEvent () {\n      // Update the columns size based on the window width.\n      let columns = Math.floor(document.querySelector('main').offsetWidth / 300)\n      let items = css(['#listing.mosaic .item', '.mosaic#listing .item'])\n      if (columns === 0) columns = 1\n      items.style.width = `calc(${100 / columns}% - 1em)`\n    },\n    scrollEvent () {\n      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n        this.show += 50\n      }\n    },\n    dragEnter () {\n      // When the user starts dragging an item, put every\n      // file on the listing with 50% opacity.\n      let items = document.getElementsByClassName('item')\n\n      Array.from(items).forEach(file => {\n        file.style.opacity = 0.5\n      })\n    },\n    dragEnd () {\n      this.resetOpacity()\n    },\n    drop: function (event) {\n      event.preventDefault()\n      this.resetOpacity()\n\n      let dt = event.dataTransfer\n      let files = dt.files\n      let el = event.target\n\n      if (files.length <= 0) return\n\n      for (let i = 0; i < 5; i++) {\n        if (el !== null && !el.classList.contains('item')) {\n          el = el.parentElement\n        }\n      }\n\n      let base = ''\n      if (el !== null && el.classList.contains('item') && el.dataset.dir === 'true') {\n        base = el.querySelector('.name').innerHTML + '/'\n      }\n\n      if (base !== '') {\n        api.fetch(this.$route.path + base)\n          .then(req => {\n            this.checkConflict(files, req.items, base)\n          })\n          .catch(this.$showError)\n\n        return\n      }\n\n      this.checkConflict(files, this.req.items, base)\n    },\n    checkConflict (files, items, base) {\n      if (typeof items === 'undefined' || items === null) {\n        items = []\n      }\n\n      let conflict = false\n      for (let i = 0; i < files.length; i++) {\n        let res = items.findIndex(function hasConflict (element) {\n          return (element.name === this)\n        }, files[i].name)\n\n        if (res >= 0) {\n          conflict = true\n          break\n        }\n      }\n\n      if (!conflict) {\n        this.handleFiles(files, base)\n        return\n      }\n\n      this.$store.commit('showHover', {\n        prompt: 'replace',\n        confirm: (event) => {\n          event.preventDefault()\n          this.$store.commit('closeHovers')\n          this.handleFiles(files, base, true)\n        }\n      })\n    },\n    uploadInput (event) {\n      this.checkConflict(event.currentTarget.files, this.req.items, '')\n    },\n    resetOpacity () {\n      let items = document.getElementsByClassName('item')\n\n      Array.from(items).forEach(file => {\n        file.style.opacity = 1\n      })\n    },\n    handleFiles (files, base, overwrite = false) {\n      buttons.loading('upload')\n      let promises = []\n      let progress = new Array(files.length).fill(0)\n\n      let onupload = (id) => (event) => {\n        progress[id] = (event.loaded / event.total) * 100\n\n        let sum = 0\n        for (let i = 0; i < progress.length; i++) {\n          sum += progress[i]\n        }\n\n        this.$store.commit('setProgress', Math.ceil(sum / progress.length))\n      }\n\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i]\n        let filenameEncoded = url.encodeRFC5987ValueChars(file.name)\n        promises.push(api.post(this.$route.path + base + filenameEncoded, file, overwrite, onupload(i)))\n      }\n\n      let finish = () => {\n        buttons.success('upload')\n        this.$store.commit('setProgress', 0)\n      }\n\n      Promise.all(promises)\n        .then(() => {\n          finish()\n          this.$store.commit('setReload', true)\n        })\n        .catch(error => {\n          finish()\n          this.$showError(error)\n        })\n\n      return false\n    },\n    async sort (by) {\n      let asc = false\n\n      if (by === 'name') {\n        if (this.nameIcon === 'arrow_upward') {\n          asc = true\n        }\n      } else if (by === 'size') {\n        if (this.sizeIcon === 'arrow_upward') {\n          asc = true\n        }\n      } else if (by === 'modified') {\n        if (this.modifiedIcon === 'arrow_upward') {\n          asc = true\n        }\n      }\n\n      try {\n        await users.update({ id: this.user.id, sorting: { by, asc } }, ['sorting'])\n      } catch (e) {\n        this.$showError(e)\n      }\n\n      this.$store.commit('setReload', true)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/components/files"}]}